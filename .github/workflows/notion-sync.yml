name: Notion to Markdown Sync

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write

jobs:
  sync-notion:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install notion-to-md @notionhq/client

      - name: Create conversion script
        run: |
          cat > convert.js << 'EOL'
          import { NotionToMarkdown } from "notion-to-md";
          import { Client } from "@notionhq/client";
          import { promises as fs } from 'fs';
          import path from 'path';
          import { fileURLToPath } from 'url';

          const __dirname = path.dirname(fileURLToPath(import.meta.url));
          const notion = new Client({ auth: process.env.NOTION_TOKEN });
          const n2m = new NotionToMarkdown({ notionClient: notion });

          function slugify(title){
            return String(title||'')
              .toLowerCase()
              .normalize('NFKD')
              .replace(/[\u0300-\u036f]/g,'')
              .replace(/[^a-z0-9]+/g,'-')
              .replace(/^-+|-+$/g,'')
              .replace(/-+/g,'-');
          }

          async function getSubpages(pageId){
            try {
              const res = await notion.blocks.children.list({ block_id: pageId });
              return res.results.filter(b => b.type === 'child_page');
            } catch(e){
              console.error('Error fetching subpages', e); return [];
            }
          }

          async function getPageTitle(pageId){
            try {
              const page = await notion.pages.retrieve({ page_id: pageId });
              return page.properties?.title?.title?.[0]?.plain_text || page.properties?.Name?.title?.[0]?.plain_text || 'Untitled';
            } catch(e){ return 'Untitled'; }
          }

          async function convertPageToMarkdown(pageId, outPath, explicitTitle, filterChildPages=false){
            try {
              let mdblocks = await n2m.pageToMarkdown(pageId);
              if(filterChildPages){
                const children = await notion.blocks.children.list({ block_id: pageId });
                const childIds = children.results.filter(b=>b.type==='child_page').map(b=>b.id);
                mdblocks = mdblocks.filter(b => !childIds.includes(b.blockId));
              }
              const mdString = n2m.toMarkdownString(mdblocks);
              const title = explicitTitle || await getPageTitle(pageId);
              const slug = slugify(title);
              const frontmatter = '---\n'
                + 'title: "' + title.replace(/"/g,'\\"') + '"\n'
                + 'date: "' + new Date().toISOString() + '"\n'
                + 'slug: "' + slug + '"\n'
                + '---\n\n';
              const full = frontmatter + mdString.parent;
              let write = true;
              if(await fs.access(outPath).then(()=>true).catch(()=>false)){
                const existing = await fs.readFile(outPath,'utf-8');
                write = existing !== full;
              }
              if(write){
                await fs.mkdir(path.dirname(outPath), { recursive: true });
                await fs.writeFile(outPath, full);
                console.log('Updated: ' + outPath);
              } else {
                console.log('No changes: ' + outPath);
              }
              return { title, slug, path: outPath };
            } catch(e){
              console.error('Convert failed for ' + pageId, e); return null;
            }
          }

          async function main(){
            const rootDir = 'src/content';
            const projectsDir = path.join(rootDir, 'projects');
            await fs.mkdir(projectsDir, { recursive: true });
            const processed = new Set();

            const baseTitle = await getPageTitle(process.env.NOTION_PAGE_ID);
            // Convert base page into index.md (treat as homepage content only)
            const baseResult = await convertPageToMarkdown(
              process.env.NOTION_PAGE_ID,
              path.join(rootDir, 'index.md'),
              baseTitle,
              true
            );
            if(baseResult) processed.add('index.md');

            const subpages = await getSubpages(process.env.NOTION_PAGE_ID);
            for(const sub of subpages){
              const title = sub.child_page?.title || 'Untitled';
              const slug = slugify(title);
              // If this subpage is meant to be the Portfolio overview (detect by title)
              if(slug === 'portfolio' || slug === 'my-portfolio'){
                const portfolioResult = await convertPageToMarkdown(sub.id, path.join(rootDir, 'portfolio.md'), title, true);
                if(portfolioResult) processed.add('portfolio.md');
                continue;
              }
              const outFile = path.join(projectsDir, slug + '.md');
              const result = await convertPageToMarkdown(sub.id, outFile, title);
              if(result) processed.add(path.join('projects', slug + '.md'));
            }

            console.log('Processed files count: ' + processed.size);
          }

          await main();
          EOL

      - name: Run conversion
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_PAGE_ID: ${{ secrets.NOTION_PAGE_ID }}
        run: node convert.js

      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add src/content/
          git commit -m "Update Notion content" || echo "No changes to commit"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
