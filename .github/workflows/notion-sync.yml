name: Notion to Markdown Sync

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write

jobs:
  sync-notion:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install notion-to-md @notionhq/client

      - name: Create conversion script
        run: |
          cat > convert.js << 'EOL'
          import { NotionToMarkdown } from "notion-to-md";
          import { Client } from "@notionhq/client";
          import { promises as fs } from 'fs';
          import path from 'path';
          import { fileURLToPath } from 'url';

          const __dirname = path.dirname(fileURLToPath(import.meta.url));

          const notion = new Client({
            auth: process.env.NOTION_TOKEN,
          });

          const n2m = new NotionToMarkdown({ notionClient: notion });

          // Turn titles into URL/file slugs
          function slugify(title) {
            return String(title || '')
              .toLowerCase()
              .normalize('NFKD')
              .replace(/[\u0300-\u036f]/g, '')
              .replace(/[^a-z0-9]+/g, '-')
              .replace(/^-+|-+$/g, '')
              .replace(/-+/g, '-');
          }

          async function getSubpages(pageId) {
            try {
              const response = await notion.blocks.children.list({
                block_id: pageId,
              });
              
              return response.results.filter(block => block.type === 'child_page');
            } catch (error) {
              console.error(\`Error getting subpages: \${error}\`);
              return [];
            }
          }

          async function getPageTitle(pageId) {
            try {
              const page = await notion.pages.retrieve({ page_id: pageId });
              // Try common title property names
              const title =
                page.properties?.title?.title?.[0]?.plain_text ||
                page.properties?.Name?.title?.[0]?.plain_text ||
                'Untitled';
              return title || 'Untitled';
            } catch (e) {
              console.error('Failed to fetch page title', e);
              return 'Untitled';
            }
          }

          async function convertPageToMarkdown(pageId, outPath, explicitTitle) {
            try {
              const mdblocks = await n2m.pageToMarkdown(pageId);
              const mdString = n2m.toMarkdownString(mdblocks);
              
              // Add frontmatter with page info
              const title = explicitTitle || await getPageTitle(pageId);
              const slug = slugify(title);
              const frontmatter = \`---\\ntitle: "\${title}"\\ndate: "\${new Date().toISOString()}"\\nslug: "\${slug}"\\n---\\n\\n\`;
              
              await fs.writeFile(outPath, frontmatter + mdString.parent);
              console.log(\`Converted page to \${outPath}\`);
              return { title, slug, path: outPath };
            } catch (error) {
              console.error(\`Error converting page \${pageId}: \${error}\`);
              return null;
            }
          }

          async function main() {
            try {
              const contentDir = 'src/content';
              await fs.mkdir(contentDir, { recursive: true });
              
              // Convert main/base page to index.md (home page)
              const baseTitle = await getPageTitle(process.env.NOTION_PAGE_ID);
              await convertPageToMarkdown(
                process.env.NOTION_PAGE_ID,
                path.join(contentDir, 'index.md'),
                baseTitle
              );
              
              // Get and convert subpages (use Notion subpage title as filename slug)
              const subpages = await getSubpages(process.env.NOTION_PAGE_ID);

              // Ensure unique filenames if slugs collide
              const used = new Set();

              for (const subpage of subpages) {
                const title = subpage.child_page?.title || 'Untitled';
                let slug = slugify(title) || 'untitled';
                let filename = \`\${slug}.md\`;
                let i = 1;
                while (used.has(filename)) {
                  i += 1;
                  filename = \`\${slug}-\${i}.md\`;
                }
                used.add(filename);

                const outPath = path.join(contentDir, filename);
                await convertPageToMarkdown(subpage.id, outPath, title);
              }
              
              console.log('Successfully converted all pages');
            } catch (error) {
              console.error('Error in main process:', error);
              process.exit(1);
            }
          }

          main();
          EOL

      - name: Run conversion
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_PAGE_ID: ${{ secrets.NOTION_PAGE_ID }}
        run: node convert.js

      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add src/content/
          git commit -m "Update Notion content" || echo "No changes to commit"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
